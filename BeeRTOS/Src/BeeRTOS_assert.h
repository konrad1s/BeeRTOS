/******************************************************************************************
 * @brief
 * @file 
 * ****************************************************************************************/

#ifndef __BEERTOS_ASSERT_H__
#define __BEERTOS_ASSERT_H__

/******************************************************************************************
 *                                        INCLUDES                                        *
 ******************************************************************************************/

#include "BeeRTOS_internal.h"
#include "BeeRTOS_assert_cfg.h"

/******************************************************************************************
 *                                         DEFINES                                        *
 ******************************************************************************************/

/*! Assert macro - calls os_report_error() if the expression is false */
#define BEERTOS_ASSERT(expr, module_id, error_id)   \
    if (!(expr))                                    \
    {                                               \
        os_report_error(module_id, error_id);       \
    }

/******************************************************************************************
 *                                        TYPEDEFS                                        *
 ******************************************************************************************/

#if (BEERTOS_USE_ASSERT_HISTORY_LOG == true)
/*! Error log structure used to store the last BEERTOS_ASSERT_HISTORY_LOG_SIZE errors */
typedef struct
{
    uint8_t module_id;
    uint8_t error_id;
    uint32_t timestamp;
} os_error_t;
#endif

#undef BEERTOS_ASSERT_USER
#define BEERTOS_ASSERT_USER(module_id, ...)  module_id,
/*! List of module IDs used in OS, also contains user defined module IDs, generated by
 *  BEERTOS_ASSERT_USER macro in BeeRTOS_assert_cfg.h */
typedef enum
{
    OS_MODULE_ID_KERNEL,
    OS_MODULE_ID_TASK,
    OS_MODULE_ID_ALARM,
    OS_MODULE_ID_MUTEX,
    OS_MODULE_ID_SEMAPHORE,
    OS_MODULE_ID_QUEUE,
    OS_MODULE_ID_MESSAGE,

    BEERTOS_ASSERT_USER_LIST()

    OS_MODULE_ID_MAX
} os_assert_module_id_t;

#undef BEERTOS_ASSERT_USER
#define BEERTOS_ASSERT_USER(module_id, ...)  __VA_ARGS__,
/* List of error IDs used in OS, also contains user defined error IDs, generated by
 * BEERTOS_ASSERT_USER macro in BeeRTOS_assert_cfg.h */
typedef enum
{
    OS_ERROR_NOT_INITIALIZED,
    OS_ERROR_INVALID_PARAM,
    OS_ERROR_INVALID_STATE,
    OS_ERROR_INVALID_OPERATION,
    OS_ERROR_NO_MEMORY,
    OS_ERROR_NO_RESOURCE,
    OS_ERROR_NO_SPACE,
    OS_ERROR_NO_DATA,
    OS_ERROR_TIMEOUT,
    OS_ERROR_OVERFLOW,
    OS_ERROR_NULLPTR,

    BEERTOS_ASSERT_USER_LIST()

    OS_ERROR_ID_MAX
} os_assert_error_id_t;

/******************************************************************************************
 *                                    GLOBAL VARIABLES                                    *
 ******************************************************************************************/

/******************************************************************************************
 *                                   FUNCTION PROTOTYPES                                  *
 ******************************************************************************************/

/**
 * @brief The function is called when an error occurs in the OS, by the BEERTOS_ASSERT macro.
 * If BEERTOS_USE_ASSERT_HISTORY_LOG is set to true, the function stores the error in the
 * history log. The function then calls BEERTOS_ASSERT_ERROR_HANDLER macro, which is defined
 * in BeeRTOS_assert_cfg.h
 *
 * @param module_id Module ID of the module where the error occurred
 * @param error_id Error ID of the error that occurred
 * @return None
 */
void os_report_error(uint8_t module_id, uint8_t error_id);

/**
 * @brief The function returns the last BEERTOS_ASSERT_HISTORY_LOG_SIZE errors that occurred
 * in the OS. The function is only available if BEERTOS_USE_ASSERT_HISTORY_LOG is set to true,
 * otherwise it returns NULL.
 *
 * @param None
 * @return Pointer to the history log
 */
os_error_t* os_assert_get_history_log(void);

#endif /* __BEERTOS_ASSERT_H__ */